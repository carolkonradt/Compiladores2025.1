PARSER_BEGIN(Bela)
import java.io.*;
import ast.*;
public class Bela {

  public static void main(String args[]) throws ParseException,IOException {
    
 	Bela analisador = new Bela(new FileInputStream(args[0]));
 	Prog arvore = analisador.Bela();
  
  }

}

PARSER_END(Bela)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN :
{
  <MAIN: "main">
| <VAR: "var">
| <APAR: "(">
| <FPAR: ")">  
| <ACHAVES: "{">
| <FCHAVES: "}">
| <TFLOAT: "float">
| <TBOOL: "bool">
| <TVOID: "void">
| <ATRIBUICAO: "=">
| <PONTOVIRGULA: ";">
| <IF: "if">
| <THEN: "then">
| <WHILE: "while">
| <READINPUT: "readInput">
| <RETURN: "return">
| <PRINTLN: "printLn">
| <TRUE: "true">
| <FALSE: "false">
| <OPADI: "+">
| <OPSUB: "-">
| <OPMULT: "*">
| <OPDIV: "/">
| <OPAND: "&&">
| <OPOR: "||">
| <OPMENOR: "<">
| <OPMAIOR: ">">
| <OPIGUAL: "==">
| <VIRGULA: ",">
| <FUNC: "fun">

}

TOKEN :
{
  <NUM : (["0"-"9"])+ ("."(["0"-"9"])+)? ("E"(["+", "-"])? (["0"-"9"])+)?>
 |< ID: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"])* ("_"(["a"-"z","A"-"Z","0"-"9"])+)*>

}

//BELA -> MAIN FUNC?

Prog Bela () :
{Main main; ArrayList<Fun> funs= null; Fun f;}
{
main = Main() (f = Func() {funs.add(f);})?
<EOF> 

{return new Prog(main, funs);}
}


Main Main () :
{ArrayList<VarDecl> vars = null;
ArrayList <Comando> coms = null;}
{
<MAIN> <APAR> <FPAR> <ACHAVES> vars = Vardecl() coms = Seqcomandos() <FCHAVES>
{return new Main(vars, coms);}
}


ArrayList<VarDecl> Vardecl () :
{
  ArrayList<VarDecl> vars = new ArrayList(); 
  Token tipo; 
  Token id;
}
{
  ( <VAR> tipo=Tipo() id=<ID> <PONTOVIRGULA> {vars.add(new Vardecl(tipo.image, id.image));} )*
  {return vars;}
}

ArrayList<Comando> Seqcomandos () :
{
    ArrayList<Comando> coms = new ArrayList(); 
    Comando c;
}
{
  ( (c = Comando() {coms.add(c);})* )
    {return coms;}
}

Token Tipo () :
{
  Token t = null;
}
{
  (t = <TFLOAT> 
  |t = <TBOOL> 
  |t = <TVOID>)
  {return t;}
}


Comando Comando () :
{
  Token id = null;
  Exp exp = null;
  ArrayList<Comando> bloco = null;
  Comando result = null;
}
{
  ( 
  id = <ID> {result = ComandoL(id);} 
  | <IF> exp = Exp() <THEN> <ACHAVES> bloco = Seqcomandos() <FCHAVES> <PONTOVIRGULA> {result = new CIf(0, exp, bloco);}
  | <WHILE> exp = Exp() <ACHAVES> bloco = Seqcomandos() <FCHAVES> <PONTOVIRGULA> {result = new CWhile(0, exp, bloco);}
  | <RETURN> exp = Exp() <PONTOVIRGULA> {result = new CReturn(0, exp);}
  | <PRINTLN> exp = Exp() <PONTOVIRGULA> {result = new CPrint(0, exp, bloco);}
  )
  {return result;}
}


Comando ComandoL (Token id) :
{
  Object exp = null;
  ArrayList<Exp> args = new ArrayList();
  Comando result = null;
}
{
  ( <ATRIBUICAO> exp = ComandoLL(id) {
    if (exp instanceof CReadInput){
      result = (CReadInput) exp;
    }else{
      result = new CAtribuicao(0, id.image, (Exp) exp);
    }
  }
  | <APAR> (args = ListaExp())? <FPAR> <PONTOVIRGULA> {result = new CChamadaFun(0, id.image, args); }
  )
  {return result;}
}

Object ComandoLL () :
{
  Exp exp = null;
}
{
( exp = Exp() <PONTOVIRGULA> {return exp;} 
| <READINPUT> <APAR> <FPAR> <PONTOVIRGULA> {return new CReadInput(0, id.image);}
)
}

Token Op () :
{
  Token op = null;
}
{
  (op = <OPADI> 
  |op = <OPSUB> 
  |op = <OPMULT> 
  |op = <OPDIV> 
  |op = <OPAND> 
  |op = <OPOR> 
  |op = <OPMENOR> 
  |op = <OPMAIOR> 
  |op = <OPIGUAL>)
  {return op;}
}

void Fator () :
{
  Token id = null;
  Token num = null;
  ArrayList<Exp> args = new ArrayList();
}
{
  id = <ID>
  ( <APAR> (args = ListaExp())?<FPAR> {return new EChamadaFun(id.image, args);}
  | {return new EVar(id.image);}
  )
  |num = <NUM> {return new EFloat(Float.parseFloat(num.image));}
  | <TRUE> {return new ETrue();}
  | <FALSE> {return new EFalse();}
  
}

void Exp() :
{ Exp arg1 = null, arg2 = null;
  Token op = null;
}
{
( 
  <APAR> arg1 = Exp() op = Op() arg2 = Exp() <FPAR> {return new EOpExp(op.image, arg1, arg2);}
| arg1 = Fator() {return arg1;} 
)
}

ArrayList<Exp> ListaExp() :
{
  ArrayList<Exp> exps = new ArrayList();
  Exp exp;
}
{
( exp = Exp() {exps.add(exp);} ListaExpL(exps) )
{return exps;}
}

void ListaExpL(ArrayList<Exp> exps) :
{
  Exp exp;
}
{
( (<VIRGULA> exp = Exp(){exps.add(exp);})* )
}

void Func() :
{
  Token name = null;
	ArrayList<ParamFormalFun> params = new ArrayList();;
	Token returnType = null;
	ArrayList<VarDecl> vars = new ArrayList();
	ArrayList<Comando> body = new ArrayList();
}
{
  ((<FUNC> returnType = Tipo() name = <ID> <APAR> (params = ListaArg())? <FPAR> <ACHAVES> vars = Vardecl() body = Seqcomandos() <FCHAVES>)+ )
  {return new Fun(name.image, params, returnType.image, vars, body); }
}


void ListaArg() :
{
  ArrayList<ParamFormalFun> params = new ArrayList();
  Token id;
  Token type;
}
{
( type = Tipo() id = <ID> {params.add(new ParamFormalFun(type.image, id.image));} ListaArgL(params))
  {return params;}
}

void ListaArgL(ArrayList<ParamFormalFun> params) :
{
  Token type;
  Token id;
}
{
( (<VIRGULA> type = Tipo() id = <ID> {params.add(new ParamFormalFun(type.image, id.image));})*)
}